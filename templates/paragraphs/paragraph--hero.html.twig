{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'paragraph--type--' ~ paragraph.bundle|clean_class,
    view_mode ? 'paragraph--view-mode--' ~ view_mode|clean_class,
    not paragraph.isPublished() ? 'paragraph--unpublished',
    'full-width'
  ]
%}
{% block paragraph %}
  <div{{ attributes.addClass(classes) }}>
    {% block content %}
    {% set image = file_url(content.field_hero_media.0['#media'].field_media_image.0.entity.fileuri) %}
    {% set title = paragraph.field_hero_title.0.value %}
    {% set link_title = paragraph.field_hero_cta.0.title %}
    {% set link_uri = paragraph.field_hero_cta.0.uri %}

      <div class="w-full gov-h-hero gov-overflow-hidden gov-bg-cover gov-flex gov-items-center gov-relative" style="background-image: url({{image}})">
        <div class="gov-bg-gradient-to-b gov-from-gray-800 gov-to-gray-900 gov-absolute gov-inset-0 gov-opacity-50"></div>
        <div class="gov-container gov-mx-4 md:gov-mx-auto gov-relative gov-z-10">
          <h1 class="gov-text-6xl gov-text-white gov-font-bold gov-uppercase gov-font-display gov-w-full md:gov-w-96 lg:gov-w-5/12 gov-mb-4">{{ title }}</h1>
          {{ link(link_title, link_uri, { 'class':['gov-inline-block', 'gov-rounded', 'gov-py-4', 'gov-px-5', 'gov-mt-4', 'gov-font-medium', 'gov-bg-gradient-to-tr', 'gov-from-yellow-200', 'gov-via-green-200', 'gov-to-green-300', 'hover:gov-from-yellow-300', 'hover:gov-via-green-300', 'hover:gov-to-green-400']} ) }}
        </div>
      </div>
      {# {{ content }} #}
    {% endblock %}
  </div>
{% endblock paragraph %}
